using System;
using System.Collections.Generic;
using System.Linq;
using static System.Reflection.MethodBase;
using Moq;
using CustomerTestsExcel;
using CustomerTestsExcel.SpecificationSpecificClassGeneration;
using SampleSystemUnderTest;
using SampleTests.IgnoreOnGeneration.AnovaCalculator;
using SampleSystemUnderTest.AnovaCalculator;
using SampleTests.IgnoreOnGeneration.Routing;
using SampleSystemUnderTest.Routing;
using SampleTests.IgnoreOnGeneration.Vermeulen_Near_Wake_Length;
using SampleSystemUnderTest.VermeulenNearWakeLength;
using SampleTests.IgnoreOnGeneration.Calculator;
using SampleSystemUnderTest.Calculator;
using SampleTests.IgnoreOnGeneration.NameConversions;

namespace SampleTests.GeneratedSpecificationSpecific
{
    public partial class SpecificationSpecificAnovaCalculator : ReportsSpecificationSetup
    {
        public string variableDescription { get; private set; }


        readonly List<SpecificationSpecificGroup> groups list ofs = new List<SpecificationSpecificGroup>();

        public SpecificationSpecificAnovaCalculator()
        {
            anovaCalculator.Setup(m => m.Groups list of).Returns(groups list ofs.Select(l => l.Group));
        }

        internal SpecificationSpecificAnovaCalculator VariableDescription_of(String variableDescription)
        {
            valueProperties.Add(GetCurrentMethod(), variableDescription);

            anovaCalculator.Setup(m => m.VariableDescription).Returns(variableDescription);

            return this;
        }




        internal SpecificationSpecificAnovaCalculator Groups list of_of(SpecificationSpecificGroup groups list of)
        {
            classProperties.Add(new ReportSpecificationSetupClass(GetCurrentMethod(), groups list of));

            this.groups list ofs.Add(groups list of);

            return this;
        }

        internal SpecificationSpecificAnovaCalculator Groups list of_table_of(ReportSpecificationSetupClassUsingTable<SpecificationSpecificGroup> groups list ofs)
        {
            groups list ofs.PropertyName = GetCurrentMethod().Name;

            classTableProperties.Add(groups list ofs);

            foreach (var row in groups list ofs.Rows)
                this.groups list ofs.Add(row.Properties);

            return this;
        }
    }
}
