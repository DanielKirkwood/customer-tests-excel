image:
- Visual Studio 2019
configuration:
  - Release
build_script:
 - nuget restore "CustomerTestsExcel.sln" -verbosity quiet
 # build GenerateCodeFromExcelTest.exe, which is used by GenerateTests.bat
 - msbuild CustomerTestsExcel.sln /verbosity:minimal /property:Configuration=Release   
 - dotnet vstest SampleTests\bin\Release\netcoreapp2.2\SampleTests.dll
 # Ensure that the Excel tests can round trip to C#
 # Regenerate the sample tests from the excel (requires GenerateCodeFromExcelTest.exe)
 - GenerateTests.bat
 - msbuild CustomerTestsExcel.sln /verbosity:minimal /property:Configuration=Release
 # run the tests, so that they re create the Excel Spreadsheets (requires some environment variables to be set)
 - dotnet test SampleTests\SampleTests.csproj
 # Regenerate the sample tests again and build / test
 - GenerateTests.bat
 - msbuild CustomerTestsExcel.sln /nowarn:1125 /verbosity:quiet /property:Configuration=Release
 # Run the end to end tests again, they are .net core now, so don't work with the nunit test runner / coverage
 - dotnet test SampleTests\SampleTests.csproj
 # run the unit tests and get coverage
 - packages\OpenCover.4.7.922\tools\OpenCover.Console.exe -register:Path64 -target:"nunit3-console.exe" -targetargs:"BuiltDlls\Release\CustomerTestsExcel.Test.dll" -output:"coverage.xml" -returntargetcode
 # create the nuget package
 - nuget pack CustomerTestsExcel\CustomerTestsExcel.csproj -Symbols
test_script:
  # upload the code coverage to codcov.io
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh -f "coverage.xml" -U "-s" -A "-s"
artifacts:
 - path: .\*.nupkg 
 - path: coverage.xml
 - path: codecov.sh
notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
    subject: 'Build {{status}}'
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true